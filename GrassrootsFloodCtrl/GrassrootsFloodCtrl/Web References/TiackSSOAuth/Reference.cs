//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace GrassrootsFloodCtrl.TiackSSOAuth {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SsoAuthServiceHttpBinding", Namespace="http://webservice.api.commnetsoft.com")]
    public partial class SsoAuthService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSTOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserSysOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback generateSTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ticketValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback idValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback refAccessTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SsoAuthService() {
            this.Url = global::GrassrootsFloodCtrl.Properties.Settings.Default.GrassrootsFloodCtrl_TiackSSOAuth_SsoAuthService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        public event getSTCompletedEventHandler getSTCompleted;
        
        /// <remarks/>
        public event getUserSysCompletedEventHandler getUserSysCompleted;
        
        /// <remarks/>
        public event getUserRoleCompletedEventHandler getUserRoleCompleted;
        
        /// <remarks/>
        public event generateSTCompletedEventHandler generateSTCompleted;
        
        /// <remarks/>
        public event ticketValidationCompletedEventHandler ticketValidationCompleted;
        
        /// <remarks/>
        public event getUserInfoCompletedEventHandler getUserInfoCompleted;
        
        /// <remarks/>
        public event getTokenCompletedEventHandler getTokenCompleted;
        
        /// <remarks/>
        public event idValidationCompletedEventHandler idValidationCompleted;
        
        /// <remarks/>
        public event refAccessTokenCompletedEventHandler refAccessTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string logout([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("logout", new object[] {
                        servicecode,
                        time,
                        sign,
                        token,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(string servicecode, string time, string sign, string token, string datatype) {
            this.logoutAsync(servicecode, time, sign, token, datatype, null);
        }
        
        /// <remarks/>
        public void logoutAsync(string servicecode, string time, string sign, string token, string datatype, object userState) {
            if ((this.logoutOperationCompleted == null)) {
                this.logoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoutOperationCompleted);
            }
            this.InvokeAsync("logout", new object[] {
                        servicecode,
                        time,
                        sign,
                        token,
                        datatype}, this.logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((this.logoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getST([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accesstoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getST", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSTAsync(string servicecode, string time, string sign, string accesstoken, string datatype) {
            this.getSTAsync(servicecode, time, sign, accesstoken, datatype, null);
        }
        
        /// <remarks/>
        public void getSTAsync(string servicecode, string time, string sign, string accesstoken, string datatype, object userState) {
            if ((this.getSTOperationCompleted == null)) {
                this.getSTOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSTOperationCompleted);
            }
            this.InvokeAsync("getST", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype}, this.getSTOperationCompleted, userState);
        }
        
        private void OngetSTOperationCompleted(object arg) {
            if ((this.getSTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSTCompleted(this, new getSTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserSys([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accesstoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserSys", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserSysAsync(string servicecode, string time, string sign, string accesstoken, string datatype) {
            this.getUserSysAsync(servicecode, time, sign, accesstoken, datatype, null);
        }
        
        /// <remarks/>
        public void getUserSysAsync(string servicecode, string time, string sign, string accesstoken, string datatype, object userState) {
            if ((this.getUserSysOperationCompleted == null)) {
                this.getUserSysOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserSysOperationCompleted);
            }
            this.InvokeAsync("getUserSys", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype}, this.getUserSysOperationCompleted, userState);
        }
        
        private void OngetUserSysOperationCompleted(object arg) {
            if ((this.getUserSysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserSysCompleted(this, new getUserSysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserRole([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accesstoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserRole", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserRoleAsync(string servicecode, string time, string sign, string accesstoken, string datatype) {
            this.getUserRoleAsync(servicecode, time, sign, accesstoken, datatype, null);
        }
        
        /// <remarks/>
        public void getUserRoleAsync(string servicecode, string time, string sign, string accesstoken, string datatype, object userState) {
            if ((this.getUserRoleOperationCompleted == null)) {
                this.getUserRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserRoleOperationCompleted);
            }
            this.InvokeAsync("getUserRole", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype}, this.getUserRoleOperationCompleted, userState);
        }
        
        private void OngetUserRoleOperationCompleted(object arg) {
            if ((this.getUserRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserRoleCompleted(this, new getUserRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string generateST([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string proxyapp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string proxytoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("generateST", new object[] {
                        servicecode,
                        time,
                        sign,
                        proxyapp,
                        proxytoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void generateSTAsync(string servicecode, string time, string sign, string proxyapp, string proxytoken, string datatype) {
            this.generateSTAsync(servicecode, time, sign, proxyapp, proxytoken, datatype, null);
        }
        
        /// <remarks/>
        public void generateSTAsync(string servicecode, string time, string sign, string proxyapp, string proxytoken, string datatype, object userState) {
            if ((this.generateSTOperationCompleted == null)) {
                this.generateSTOperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateSTOperationCompleted);
            }
            this.InvokeAsync("generateST", new object[] {
                        servicecode,
                        time,
                        sign,
                        proxyapp,
                        proxytoken,
                        datatype}, this.generateSTOperationCompleted, userState);
        }
        
        private void OngenerateSTOperationCompleted(object arg) {
            if ((this.generateSTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateSTCompleted(this, new generateSTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string ticketValidation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string st, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("ticketValidation", new object[] {
                        servicecode,
                        time,
                        sign,
                        st,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ticketValidationAsync(string servicecode, string time, string sign, string st, string datatype) {
            this.ticketValidationAsync(servicecode, time, sign, st, datatype, null);
        }
        
        /// <remarks/>
        public void ticketValidationAsync(string servicecode, string time, string sign, string st, string datatype, object userState) {
            if ((this.ticketValidationOperationCompleted == null)) {
                this.ticketValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnticketValidationOperationCompleted);
            }
            this.InvokeAsync("ticketValidation", new object[] {
                        servicecode,
                        time,
                        sign,
                        st,
                        datatype}, this.ticketValidationOperationCompleted, userState);
        }
        
        private void OnticketValidationOperationCompleted(object arg) {
            if ((this.ticketValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ticketValidationCompleted(this, new ticketValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accesstoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string servicecode, string time, string sign, string accesstoken, string datatype) {
            this.getUserInfoAsync(servicecode, time, sign, accesstoken, datatype, null);
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string servicecode, string time, string sign, string accesstoken, string datatype, object userState) {
            if ((this.getUserInfoOperationCompleted == null)) {
                this.getUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInfoOperationCompleted);
            }
            this.InvokeAsync("getUserInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        accesstoken,
                        datatype}, this.getUserInfoOperationCompleted, userState);
        }
        
        private void OngetUserInfoOperationCompleted(object arg) {
            if ((this.getUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInfoCompleted(this, new getUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getToken([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authcode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getToken", new object[] {
                        servicecode,
                        time,
                        sign,
                        authcode,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTokenAsync(string servicecode, string time, string sign, string authcode, string datatype) {
            this.getTokenAsync(servicecode, time, sign, authcode, datatype, null);
        }
        
        /// <remarks/>
        public void getTokenAsync(string servicecode, string time, string sign, string authcode, string datatype, object userState) {
            if ((this.getTokenOperationCompleted == null)) {
                this.getTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTokenOperationCompleted);
            }
            this.InvokeAsync("getToken", new object[] {
                        servicecode,
                        time,
                        sign,
                        authcode,
                        datatype}, this.getTokenOperationCompleted, userState);
        }
        
        private void OngetTokenOperationCompleted(object arg) {
            if ((this.getTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTokenCompleted(this, new getTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string idValidation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string encryptiontype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("idValidation", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        encryptiontype,
                        password,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void idValidationAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string encryptiontype, string password, string datatype) {
            this.idValidationAsync(servicecode, time, sign, loginname, orgcoding, encryptiontype, password, datatype, null);
        }
        
        /// <remarks/>
        public void idValidationAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string encryptiontype, string password, string datatype, object userState) {
            if ((this.idValidationOperationCompleted == null)) {
                this.idValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnidValidationOperationCompleted);
            }
            this.InvokeAsync("idValidation", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        encryptiontype,
                        password,
                        datatype}, this.idValidationOperationCompleted, userState);
        }
        
        private void OnidValidationOperationCompleted(object arg) {
            if ((this.idValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.idValidationCompleted(this, new idValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string refAccessToken([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string refreshtoken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("refAccessToken", new object[] {
                        servicecode,
                        time,
                        sign,
                        refreshtoken,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void refAccessTokenAsync(string servicecode, string time, string sign, string refreshtoken, string datatype) {
            this.refAccessTokenAsync(servicecode, time, sign, refreshtoken, datatype, null);
        }
        
        /// <remarks/>
        public void refAccessTokenAsync(string servicecode, string time, string sign, string refreshtoken, string datatype, object userState) {
            if ((this.refAccessTokenOperationCompleted == null)) {
                this.refAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrefAccessTokenOperationCompleted);
            }
            this.InvokeAsync("refAccessToken", new object[] {
                        servicecode,
                        time,
                        sign,
                        refreshtoken,
                        datatype}, this.refAccessTokenOperationCompleted, userState);
        }
        
        private void OnrefAccessTokenOperationCompleted(object arg) {
            if ((this.refAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.refAccessTokenCompleted(this, new refAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSTCompletedEventHandler(object sender, getSTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserSysCompletedEventHandler(object sender, getUserSysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserSysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserSysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserRoleCompletedEventHandler(object sender, getUserRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void generateSTCompletedEventHandler(object sender, generateSTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateSTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal generateSTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ticketValidationCompletedEventHandler(object sender, ticketValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ticketValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ticketValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserInfoCompletedEventHandler(object sender, getUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getTokenCompletedEventHandler(object sender, getTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void idValidationCompletedEventHandler(object sender, idValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class idValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal idValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void refAccessTokenCompletedEventHandler(object sender, refAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class refAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal refAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591