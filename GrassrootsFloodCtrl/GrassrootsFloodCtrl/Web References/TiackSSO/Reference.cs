//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace GrassrootsFloodCtrl.TiackSSO {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OrgAndUserServiceHttpBinding", Namespace="http://webservice.api.commnetsoft.com")]
    public partial class OrgAndUserService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getUserInfoByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchronizeJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteOrgOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSsoUserByMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteofficeOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchronizeOrgOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchronizePositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOrgInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchronizeUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteAppUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMapUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserRoleByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchronizeOfficeOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSubOrgOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OrgAndUserService() {
            this.Url = global::GrassrootsFloodCtrl.Properties.Settings.Default.GrassrootsFloodCtrl_TiackSSO_OrgAndUserService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getUserInfoByIdCompletedEventHandler getUserInfoByIdCompleted;
        
        /// <remarks/>
        public event synchronizeJobCompletedEventHandler synchronizeJobCompleted;
        
        /// <remarks/>
        public event deleteOrgCompletedEventHandler deleteOrgCompleted;
        
        /// <remarks/>
        public event syncPositionCompletedEventHandler syncPositionCompleted;
        
        /// <remarks/>
        public event getUserInfoCompletedEventHandler getUserInfoCompleted;
        
        /// <remarks/>
        public event getSsoUserByMapCompletedEventHandler getSsoUserByMapCompleted;
        
        /// <remarks/>
        public event getUserListCompletedEventHandler getUserListCompleted;
        
        /// <remarks/>
        public event getPositionCompletedEventHandler getPositionCompleted;
        
        /// <remarks/>
        public event deleteofficeCompletedEventHandler deleteofficeCompleted;
        
        /// <remarks/>
        public event synchronizeOrgCompletedEventHandler synchronizeOrgCompleted;
        
        /// <remarks/>
        public event synchronizePositionCompletedEventHandler synchronizePositionCompleted;
        
        /// <remarks/>
        public event getOrgInfoCompletedEventHandler getOrgInfoCompleted;
        
        /// <remarks/>
        public event synchronizeUserCompletedEventHandler synchronizeUserCompleted;
        
        /// <remarks/>
        public event deleteAppUserCompletedEventHandler deleteAppUserCompleted;
        
        /// <remarks/>
        public event getMapUserCompletedEventHandler getMapUserCompleted;
        
        /// <remarks/>
        public event getUserRoleByIdCompletedEventHandler getUserRoleByIdCompleted;
        
        /// <remarks/>
        public event getUserRoleCompletedEventHandler getUserRoleCompleted;
        
        /// <remarks/>
        public event synchronizeOfficeCompletedEventHandler synchronizeOfficeCompleted;
        
        /// <remarks/>
        public event deleteJobCompletedEventHandler deleteJobCompleted;
        
        /// <remarks/>
        public event deletePositionCompletedEventHandler deletePositionCompleted;
        
        /// <remarks/>
        public event deleteUserCompletedEventHandler deleteUserCompleted;
        
        /// <remarks/>
        public event deleteUserByIdCompletedEventHandler deleteUserByIdCompleted;
        
        /// <remarks/>
        public event getSubOrgCompletedEventHandler getSubOrgCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserInfoById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserInfoById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInfoByIdAsync(string servicecode, string time, string sign, string userid, string datatype) {
            this.getUserInfoByIdAsync(servicecode, time, sign, userid, datatype, null);
        }
        
        /// <remarks/>
        public void getUserInfoByIdAsync(string servicecode, string time, string sign, string userid, string datatype, object userState) {
            if ((this.getUserInfoByIdOperationCompleted == null)) {
                this.getUserInfoByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInfoByIdOperationCompleted);
            }
            this.InvokeAsync("getUserInfoById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype}, this.getUserInfoByIdOperationCompleted, userState);
        }
        
        private void OngetUserInfoByIdOperationCompleted(object arg) {
            if ((this.getUserInfoByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInfoByIdCompleted(this, new getUserInfoByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string synchronizeJob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string jobid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string jobname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderby, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("synchronizeJob", new object[] {
                        servicecode,
                        time,
                        sign,
                        jobid,
                        jobname,
                        orderby,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchronizeJobAsync(string servicecode, string time, string sign, string jobid, string jobname, string orderby, string datatype) {
            this.synchronizeJobAsync(servicecode, time, sign, jobid, jobname, orderby, datatype, null);
        }
        
        /// <remarks/>
        public void synchronizeJobAsync(string servicecode, string time, string sign, string jobid, string jobname, string orderby, string datatype, object userState) {
            if ((this.synchronizeJobOperationCompleted == null)) {
                this.synchronizeJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizeJobOperationCompleted);
            }
            this.InvokeAsync("synchronizeJob", new object[] {
                        servicecode,
                        time,
                        sign,
                        jobid,
                        jobname,
                        orderby,
                        datatype}, this.synchronizeJobOperationCompleted, userState);
        }
        
        private void OnsynchronizeJobOperationCompleted(object arg) {
            if ((this.synchronizeJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizeJobCompleted(this, new synchronizeJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteOrg([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("deleteOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteOrgAsync(string servicecode, string time, string sign, string orgcoding, string datatype, string describe) {
            this.deleteOrgAsync(servicecode, time, sign, orgcoding, datatype, describe, null);
        }
        
        /// <remarks/>
        public void deleteOrgAsync(string servicecode, string time, string sign, string orgcoding, string datatype, string describe, object userState) {
            if ((this.deleteOrgOperationCompleted == null)) {
                this.deleteOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOrgOperationCompleted);
            }
            this.InvokeAsync("deleteOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        datatype,
                        describe}, this.deleteOrgOperationCompleted, userState);
        }
        
        private void OndeleteOrgOperationCompleted(object arg) {
            if ((this.deleteOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteOrgCompleted(this, new deleteOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string syncPosition([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string args, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("syncPosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncPositionAsync(string servicecode, string time, string sign, string args, string datatype, string describe) {
            this.syncPositionAsync(servicecode, time, sign, args, datatype, describe, null);
        }
        
        /// <remarks/>
        public void syncPositionAsync(string servicecode, string time, string sign, string args, string datatype, string describe, object userState) {
            if ((this.syncPositionOperationCompleted == null)) {
                this.syncPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncPositionOperationCompleted);
            }
            this.InvokeAsync("syncPosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe}, this.syncPositionOperationCompleted, userState);
        }
        
        private void OnsyncPositionOperationCompleted(object arg) {
            if ((this.syncPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncPositionCompleted(this, new syncPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype) {
            this.getUserInfoAsync(servicecode, time, sign, loginname, orgcoding, datatype, null);
        }
        
        /// <remarks/>
        public void getUserInfoAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype, object userState) {
            if ((this.getUserInfoOperationCompleted == null)) {
                this.getUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInfoOperationCompleted);
            }
            this.InvokeAsync("getUserInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype}, this.getUserInfoOperationCompleted, userState);
        }
        
        private void OngetUserInfoOperationCompleted(object arg) {
            if ((this.getUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInfoCompleted(this, new getUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getSsoUserByMap([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string args, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getSsoUserByMap", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSsoUserByMapAsync(string servicecode, string time, string sign, string args, string datatype) {
            this.getSsoUserByMapAsync(servicecode, time, sign, args, datatype, null);
        }
        
        /// <remarks/>
        public void getSsoUserByMapAsync(string servicecode, string time, string sign, string args, string datatype, object userState) {
            if ((this.getSsoUserByMapOperationCompleted == null)) {
                this.getSsoUserByMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSsoUserByMapOperationCompleted);
            }
            this.InvokeAsync("getSsoUserByMap", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype}, this.getSsoUserByMapOperationCompleted, userState);
        }
        
        private void OngetSsoUserByMapOperationCompleted(object arg) {
            if ((this.getSsoUserByMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSsoUserByMapCompleted(this, new getSsoUserByMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string scope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserList", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        scope,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListAsync(string servicecode, string time, string sign, string orgcoding, string scope, string datatype) {
            this.getUserListAsync(servicecode, time, sign, orgcoding, scope, datatype, null);
        }
        
        /// <remarks/>
        public void getUserListAsync(string servicecode, string time, string sign, string orgcoding, string scope, string datatype, object userState) {
            if ((this.getUserListOperationCompleted == null)) {
                this.getUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListOperationCompleted);
            }
            this.InvokeAsync("getUserList", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        scope,
                        datatype}, this.getUserListOperationCompleted, userState);
        }
        
        private void OngetUserListOperationCompleted(object arg) {
            if ((this.getUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListCompleted(this, new getUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getPosition([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string positionid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getPosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPositionAsync(string servicecode, string time, string sign, string positionid, string datatype) {
            this.getPositionAsync(servicecode, time, sign, positionid, datatype, null);
        }
        
        /// <remarks/>
        public void getPositionAsync(string servicecode, string time, string sign, string positionid, string datatype, object userState) {
            if ((this.getPositionOperationCompleted == null)) {
                this.getPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPositionOperationCompleted);
            }
            this.InvokeAsync("getPosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        datatype}, this.getPositionOperationCompleted, userState);
        }
        
        private void OngetPositionOperationCompleted(object arg) {
            if ((this.getPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPositionCompleted(this, new getPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteoffice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("deleteoffice", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteofficeAsync(string in0, string in1, string in2, string in3, string in4) {
            this.deleteofficeAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void deleteofficeAsync(string in0, string in1, string in2, string in3, string in4, object userState) {
            if ((this.deleteofficeOperationCompleted == null)) {
                this.deleteofficeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteofficeOperationCompleted);
            }
            this.InvokeAsync("deleteoffice", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.deleteofficeOperationCompleted, userState);
        }
        
        private void OndeleteofficeOperationCompleted(object arg) {
            if ((this.deleteofficeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteofficeCompleted(this, new deleteofficeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string synchronizeOrg([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string args, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("synchronizeOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchronizeOrgAsync(string servicecode, string time, string sign, string args, string datatype, string describe) {
            this.synchronizeOrgAsync(servicecode, time, sign, args, datatype, describe, null);
        }
        
        /// <remarks/>
        public void synchronizeOrgAsync(string servicecode, string time, string sign, string args, string datatype, string describe, object userState) {
            if ((this.synchronizeOrgOperationCompleted == null)) {
                this.synchronizeOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizeOrgOperationCompleted);
            }
            this.InvokeAsync("synchronizeOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe}, this.synchronizeOrgOperationCompleted, userState);
        }
        
        private void OnsynchronizeOrgOperationCompleted(object arg) {
            if ((this.synchronizeOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizeOrgCompleted(this, new synchronizeOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string synchronizePosition([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string positionid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string positionname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderby, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("synchronizePosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        positionname,
                        orderby,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchronizePositionAsync(string servicecode, string time, string sign, string positionid, string positionname, string orderby, string datatype) {
            this.synchronizePositionAsync(servicecode, time, sign, positionid, positionname, orderby, datatype, null);
        }
        
        /// <remarks/>
        public void synchronizePositionAsync(string servicecode, string time, string sign, string positionid, string positionname, string orderby, string datatype, object userState) {
            if ((this.synchronizePositionOperationCompleted == null)) {
                this.synchronizePositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizePositionOperationCompleted);
            }
            this.InvokeAsync("synchronizePosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        positionname,
                        orderby,
                        datatype}, this.synchronizePositionOperationCompleted, userState);
        }
        
        private void OnsynchronizePositionOperationCompleted(object arg) {
            if ((this.synchronizePositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizePositionCompleted(this, new synchronizePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getOrgInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getOrgInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getOrgInfoAsync(string servicecode, string time, string sign, string orgcoding, string datatype) {
            this.getOrgInfoAsync(servicecode, time, sign, orgcoding, datatype, null);
        }
        
        /// <remarks/>
        public void getOrgInfoAsync(string servicecode, string time, string sign, string orgcoding, string datatype, object userState) {
            if ((this.getOrgInfoOperationCompleted == null)) {
                this.getOrgInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOrgInfoOperationCompleted);
            }
            this.InvokeAsync("getOrgInfo", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        datatype}, this.getOrgInfoOperationCompleted, userState);
        }
        
        private void OngetOrgInfoOperationCompleted(object arg) {
            if ((this.getOrgInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOrgInfoCompleted(this, new getOrgInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string synchronizeUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string args, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("synchronizeUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchronizeUserAsync(string servicecode, string time, string sign, string args, string datatype, string describe) {
            this.synchronizeUserAsync(servicecode, time, sign, args, datatype, describe, null);
        }
        
        /// <remarks/>
        public void synchronizeUserAsync(string servicecode, string time, string sign, string args, string datatype, string describe, object userState) {
            if ((this.synchronizeUserOperationCompleted == null)) {
                this.synchronizeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizeUserOperationCompleted);
            }
            this.InvokeAsync("synchronizeUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        args,
                        datatype,
                        describe}, this.synchronizeUserOperationCompleted, userState);
        }
        
        private void OnsynchronizeUserOperationCompleted(object arg) {
            if ((this.synchronizeUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizeUserCompleted(this, new synchronizeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteAppUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("deleteAppUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteAppUserAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype) {
            this.deleteAppUserAsync(servicecode, time, sign, loginname, orgcoding, datatype, null);
        }
        
        /// <remarks/>
        public void deleteAppUserAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype, object userState) {
            if ((this.deleteAppUserOperationCompleted == null)) {
                this.deleteAppUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteAppUserOperationCompleted);
            }
            this.InvokeAsync("deleteAppUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype}, this.deleteAppUserOperationCompleted, userState);
        }
        
        private void OndeleteAppUserOperationCompleted(object arg) {
            if ((this.deleteAppUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteAppUserCompleted(this, new deleteAppUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getMapUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mapservicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getMapUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        mapservicecode,
                        loginname,
                        orgcoding,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMapUserAsync(string servicecode, string time, string sign, string mapservicecode, string loginname, string orgcoding, string datatype) {
            this.getMapUserAsync(servicecode, time, sign, mapservicecode, loginname, orgcoding, datatype, null);
        }
        
        /// <remarks/>
        public void getMapUserAsync(string servicecode, string time, string sign, string mapservicecode, string loginname, string orgcoding, string datatype, object userState) {
            if ((this.getMapUserOperationCompleted == null)) {
                this.getMapUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMapUserOperationCompleted);
            }
            this.InvokeAsync("getMapUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        mapservicecode,
                        loginname,
                        orgcoding,
                        datatype}, this.getMapUserOperationCompleted, userState);
        }
        
        private void OngetMapUserOperationCompleted(object arg) {
            if ((this.getMapUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMapUserCompleted(this, new getMapUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserRoleById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserRoleById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserRoleByIdAsync(string servicecode, string time, string sign, string userid, string datatype) {
            this.getUserRoleByIdAsync(servicecode, time, sign, userid, datatype, null);
        }
        
        /// <remarks/>
        public void getUserRoleByIdAsync(string servicecode, string time, string sign, string userid, string datatype, object userState) {
            if ((this.getUserRoleByIdOperationCompleted == null)) {
                this.getUserRoleByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserRoleByIdOperationCompleted);
            }
            this.InvokeAsync("getUserRoleById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype}, this.getUserRoleByIdOperationCompleted, userState);
        }
        
        private void OngetUserRoleByIdOperationCompleted(object arg) {
            if ((this.getUserRoleByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserRoleByIdCompleted(this, new getUserRoleByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserRole([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getUserRole", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserRoleAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype) {
            this.getUserRoleAsync(servicecode, time, sign, loginname, orgcoding, datatype, null);
        }
        
        /// <remarks/>
        public void getUserRoleAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype, object userState) {
            if ((this.getUserRoleOperationCompleted == null)) {
                this.getUserRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserRoleOperationCompleted);
            }
            this.InvokeAsync("getUserRole", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype}, this.getUserRoleOperationCompleted, userState);
        }
        
        private void OngetUserRoleOperationCompleted(object arg) {
            if ((this.getUserRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserRoleCompleted(this, new getUserRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string synchronizeOffice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in5, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in6, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in7) {
            object[] results = this.Invoke("synchronizeOffice", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5,
                        in6,
                        in7});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchronizeOfficeAsync(string in0, string in1, string in2, string in3, string in4, string in5, string in6, string in7) {
            this.synchronizeOfficeAsync(in0, in1, in2, in3, in4, in5, in6, in7, null);
        }
        
        /// <remarks/>
        public void synchronizeOfficeAsync(string in0, string in1, string in2, string in3, string in4, string in5, string in6, string in7, object userState) {
            if ((this.synchronizeOfficeOperationCompleted == null)) {
                this.synchronizeOfficeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchronizeOfficeOperationCompleted);
            }
            this.InvokeAsync("synchronizeOffice", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5,
                        in6,
                        in7}, this.synchronizeOfficeOperationCompleted, userState);
        }
        
        private void OnsynchronizeOfficeOperationCompleted(object arg) {
            if ((this.synchronizeOfficeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchronizeOfficeCompleted(this, new synchronizeOfficeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteJob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("deleteJob", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteJobAsync(string in0, string in1, string in2, string in3, string in4) {
            this.deleteJobAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void deleteJobAsync(string in0, string in1, string in2, string in3, string in4, object userState) {
            if ((this.deleteJobOperationCompleted == null)) {
                this.deleteJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteJobOperationCompleted);
            }
            this.InvokeAsync("deleteJob", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.deleteJobOperationCompleted, userState);
        }
        
        private void OndeleteJobOperationCompleted(object arg) {
            if ((this.deleteJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteJobCompleted(this, new deleteJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deletePosition([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string positionid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("deletePosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deletePositionAsync(string servicecode, string time, string sign, string positionid, string datatype) {
            this.deletePositionAsync(servicecode, time, sign, positionid, datatype, null);
        }
        
        /// <remarks/>
        public void deletePositionAsync(string servicecode, string time, string sign, string positionid, string datatype, object userState) {
            if ((this.deletePositionOperationCompleted == null)) {
                this.deletePositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePositionOperationCompleted);
            }
            this.InvokeAsync("deletePosition", new object[] {
                        servicecode,
                        time,
                        sign,
                        positionid,
                        datatype}, this.deletePositionOperationCompleted, userState);
        }
        
        private void OndeletePositionOperationCompleted(object arg) {
            if ((this.deletePositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePositionCompleted(this, new deletePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("deleteUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype, string describe) {
            this.deleteUserAsync(servicecode, time, sign, loginname, orgcoding, datatype, describe, null);
        }
        
        /// <remarks/>
        public void deleteUserAsync(string servicecode, string time, string sign, string loginname, string orgcoding, string datatype, string describe, object userState) {
            if ((this.deleteUserOperationCompleted == null)) {
                this.deleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserOperationCompleted);
            }
            this.InvokeAsync("deleteUser", new object[] {
                        servicecode,
                        time,
                        sign,
                        loginname,
                        orgcoding,
                        datatype,
                        describe}, this.deleteUserOperationCompleted, userState);
        }
        
        private void OndeleteUserOperationCompleted(object arg) {
            if ((this.deleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserCompleted(this, new deleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string deleteUserById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string describe) {
            object[] results = this.Invoke("deleteUserById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype,
                        describe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserByIdAsync(string servicecode, string time, string sign, string userid, string datatype, string describe) {
            this.deleteUserByIdAsync(servicecode, time, sign, userid, datatype, describe, null);
        }
        
        /// <remarks/>
        public void deleteUserByIdAsync(string servicecode, string time, string sign, string userid, string datatype, string describe, object userState) {
            if ((this.deleteUserByIdOperationCompleted == null)) {
                this.deleteUserByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserByIdOperationCompleted);
            }
            this.InvokeAsync("deleteUserById", new object[] {
                        servicecode,
                        time,
                        sign,
                        userid,
                        datatype,
                        describe}, this.deleteUserByIdOperationCompleted, userState);
        }
        
        private void OndeleteUserByIdOperationCompleted(object arg) {
            if ((this.deleteUserByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserByIdCompleted(this, new deleteUserByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.api.commnetsoft.com", ResponseNamespace="http://webservice.api.commnetsoft.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getSubOrg([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string servicecode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sign, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orgcoding, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string scope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string datatype) {
            object[] results = this.Invoke("getSubOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        scope,
                        datatype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSubOrgAsync(string servicecode, string time, string sign, string orgcoding, string scope, string datatype) {
            this.getSubOrgAsync(servicecode, time, sign, orgcoding, scope, datatype, null);
        }
        
        /// <remarks/>
        public void getSubOrgAsync(string servicecode, string time, string sign, string orgcoding, string scope, string datatype, object userState) {
            if ((this.getSubOrgOperationCompleted == null)) {
                this.getSubOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSubOrgOperationCompleted);
            }
            this.InvokeAsync("getSubOrg", new object[] {
                        servicecode,
                        time,
                        sign,
                        orgcoding,
                        scope,
                        datatype}, this.getSubOrgOperationCompleted, userState);
        }
        
        private void OngetSubOrgOperationCompleted(object arg) {
            if ((this.getSubOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSubOrgCompleted(this, new getSubOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserInfoByIdCompletedEventHandler(object sender, getUserInfoByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInfoByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInfoByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchronizeJobCompletedEventHandler(object sender, synchronizeJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizeJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchronizeJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteOrgCompletedEventHandler(object sender, deleteOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void syncPositionCompletedEventHandler(object sender, syncPositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserInfoCompletedEventHandler(object sender, getUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSsoUserByMapCompletedEventHandler(object sender, getSsoUserByMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSsoUserByMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSsoUserByMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserListCompletedEventHandler(object sender, getUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getPositionCompletedEventHandler(object sender, getPositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteofficeCompletedEventHandler(object sender, deleteofficeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteofficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteofficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchronizeOrgCompletedEventHandler(object sender, synchronizeOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizeOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchronizeOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchronizePositionCompletedEventHandler(object sender, synchronizePositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizePositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchronizePositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getOrgInfoCompletedEventHandler(object sender, getOrgInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOrgInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOrgInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchronizeUserCompletedEventHandler(object sender, synchronizeUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchronizeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteAppUserCompletedEventHandler(object sender, deleteAppUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteAppUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteAppUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getMapUserCompletedEventHandler(object sender, getMapUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMapUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMapUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserRoleByIdCompletedEventHandler(object sender, getUserRoleByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserRoleByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserRoleByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getUserRoleCompletedEventHandler(object sender, getUserRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchronizeOfficeCompletedEventHandler(object sender, synchronizeOfficeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchronizeOfficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchronizeOfficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteJobCompletedEventHandler(object sender, deleteJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deletePositionCompletedEventHandler(object sender, deletePositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deletePositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deletePositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteUserCompletedEventHandler(object sender, deleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void deleteUserByIdCompletedEventHandler(object sender, deleteUserByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSubOrgCompletedEventHandler(object sender, getSubOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSubOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSubOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591